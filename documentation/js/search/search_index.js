var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.083,1,1.858]],["body/controllers/AppController.html",[0,1.791,1,3.073,2,1.468,3,0.531,4,0.457,5,0.457,6,3.344,7,0.648,8,0.039,9,0.974,10,2.636,11,3.344,12,0.531,13,0.026,14,2.236,15,2.001,16,0.032,17,0.032]],["title/modules/AppModule.html",[18,1.083,19,1.858]],["body/modules/AppModule.html",[1,2.848,2,1.458,3,0.386,4,0.333,5,0.333,7,0.698,8,0.039,9,0.708,10,2.628,11,2.432,12,0.386,13,0.019,16,0.026,17,0.026,18,1.66,19,3.596,20,1.788,21,1.309,22,1.626,23,1.626,24,1.309,25,2.529,26,1.626,27,2.432,28,2.432,29,2.432,30,2.628,31,2.936,32,2.364,33,2.22,34,1.626,35,1.455,36,2.954,37,2.5,38,2.954,39,1.626,40,2.954,41,2.954,42,2.954]],["title/injectables/AppService.html",[10,1.477,43,1.083]],["body/injectables/AppService.html",[3,0.51,4,0.439,5,0.439,7,0.51,8,0.038,9,0.936,10,2.382,12,0.51,13,0.025,16,0.031,17,0.031,43,1.748,44,2.148,45,3.212,46,0.839,47,2.382,48,5.494,49,1.152,50,3.901,51,1.922,52,1.748,53,1.922,54,3.901,55,3.901]],["title/controllers/AuthController.html",[0,1.083,56,1.858]],["body/controllers/AuthController.html",[0,1.46,2,1.46,3,0.529,4,0.455,5,0.455,7,0.646,8,0.039,9,0.969,12,0.529,13,0.026,14,2.224,15,1.991,16,0.032,17,0.032,56,3.063,57,3.327,58,2.856,59,4.041,60,1.791,61,3.327,62,4.041,63,4.041]],["title/modules/AuthModule.html",[18,1.083,30,1.477]],["body/modules/AuthModule.html",[2,1.536,3,0.418,4,0.359,5,0.359,7,0.666,8,0.039,9,0.766,12,0.418,13,0.021,16,0.027,17,0.027,18,1.727,20,1.415,21,1.415,22,1.757,23,1.757,24,1.415,25,2.631,26,2.631,30,2.744,32,1.884,33,2.34,34,1.757,35,1.573,37,1.979,56,2.962,60,2.603,61,2.628,64,2.628,65,2.628,66,2.628,67,3.192,68,2.635,69,3.192,70,2.628,71,2.256,72,2.256,73,2.256]],["title/injectables/AuthService.html",[43,1.083,60,1.329]],["body/injectables/AuthService.html",[3,0.372,4,0.321,5,0.321,7,0.514,8,0.039,9,0.683,12,0.372,13,0.018,15,1.403,16,0.025,17,0.025,43,1.421,44,1.567,46,0.612,47,1.938,49,1.331,51,1.938,52,2.066,53,1.938,60,1.743,68,1.765,71,2.012,72,2.012,73,2.012,74,2.344,75,2.904,76,4.86,77,3.933,78,3.238,79,2.344,80,2.162,81,2.847,82,2.165,83,2.165,84,1.161,85,1.573,86,2.847,87,2.847,88,3.933,89,3.71,90,2.793,91,2.847,92,2.012,93,2.344,94,2.344,95,2.847,96,2.847,97,2.344,98,1.765,99,2.847,100,2.847,101,2.344]],["title/classes/CreatePostDto.html",[13,0.019,102,1.65]],["body/classes/CreatePostDto.html",[3,0.141,4,0.121,5,0.121,7,0.457,8,0.039,12,0.141,13,0.016,16,0.012,17,0.012,46,0.231,49,1.259,52,1.805,84,1.492,85,1.803,101,2.877,102,1.012,103,0.476,104,3.106,105,0.759,106,1.421,107,2.639,108,2.409,109,2.409,110,3.242,111,2.409,112,2.409,113,3.735,114,1.703,115,3.205,116,2.639,117,1.889,118,2.639,119,1.845,120,3.164,121,3.205,122,1.074,123,1.074,124,3.938,125,1.838,126,1.838,127,1.074,128,1.074,129,1.768,130,1.074,131,3.494,132,2.348,133,1.513,134,1.838,135,1.074,136,1.074,137,1.074,138,1.838,139,1.845,140,2.348,141,3.494,142,1.768,143,1.513,144,1.074,145,1.074,146,3.205,147,1.983,148,1.838,149,1.838,150,1.074,151,1.074,152,1.838,153,2.409,154,2.852,155,2.409,156,1.838,157,1.838,158,1.838,159,1.074,160,1.074,161,1.074,162,1.074,163,1.513,164,1.513,165,1.838,166,2.852,167,1.513,168,1.838,169,1.513,170,1.838,171,1.838,172,1.074,173,2.852,174,2.852,175,1.513,176,1.838,177,1.838,178,1.838,179,1.838,180,1.838,181,1.074,182,2.639,183,1.513,184,1.513,185,1.513,186,1.074,187,1.074,188,1.838,189,1.838,190,1.074,191,1.074,192,3.735,193,1.074,194,1.074,195,1.074,196,2.266,197,1.074,198,2.409,199,1.074,200,2.64,201,1.074,202,0.884,203,1.987,204,1.513,205,1.838,206,1.838,207,1.838,208,1.838,209,0.529,210,0.759,211,1.074,212,1.074,213,1.139,214,1.703,215,1.074,216,2.639,217,3.075,218,0.529,219,1.074,220,1.838,221,0.884,222,1.074,223,1.074,224,1.074,225,1.074,226,1.074,227,1.074,228,1.074,229,1.074,230,1.074,231,1.074,232,1.074,233,1.074,234,1.074,235,1.838,236,0.884,237,1.074,238,1.074,239,1.703,240,0.884,241,1.074,242,1.074,243,1.299,244,0.884,245,1.074,246,0.884,247,1.838,248,1.838,249,1.074,250,1.074,251,1.074,252,1.074,253,1.074,254,2.409,255,1.299,256,2.409,257,1.074,258,0.884,259,1.074,260,1.074,261,1.074,262,1.074,263,1.074,264,1.074,265,1.074,266,0.884,267,1.074,268,1.074]],["title/classes/CreatePostMetaOptionsDto.html",[13,0.019,129,1.858]],["body/classes/CreatePostMetaOptionsDto.html",[3,0.464,4,0.4,5,0.4,7,0.464,8,0.038,12,0.464,13,0.029,16,0.029,17,0.029,46,0.764,49,1.346,52,1.647,84,1.346,103,1.574,104,3.557,106,2.019,117,2.019,119,2.012,129,2.825,196,3.221,203,3.291,209,1.749,214,3.557,239,3.557,243,3.557,269,2.923,270,3.551,271,3.551,272,3.551]],["title/classes/CreateUserDto.html",[13,0.019,273,1.65]],["body/classes/CreateUserDto.html",[3,0.351,4,0.302,5,0.302,7,0.351,8,0.038,12,0.351,13,0.024,16,0.024,17,0.024,46,0.577,49,1.399,52,1.962,84,1.399,85,1.509,89,4.109,92,3.085,103,1.189,106,1.672,117,2.099,175,3.107,196,3.348,200,2.667,202,2.209,203,2.936,204,2.209,209,1.322,236,3.107,266,3.107,273,2.077,274,4.109,275,1.896,276,3.594,277,4.365,278,2.683,279,2.683,280,2.683,281,2.683,282,2.683,283,2.683,284,2.683,285,3.774,286,3.774,287,3.774,288,3.774,289,5.177,290,3.774,291,4.736,292,3.774,293,2.077,294,2.683,295,3.774,296,2.683,297,3.774,298,2.683,299,2.683]],["title/classes/GetUsersParamDto.html",[13,0.019,300,1.65]],["body/classes/GetUsersParamDto.html",[3,0.439,4,0.378,5,0.378,7,0.641,8,0.039,12,0.439,13,0.032,16,0.028,17,0.028,39,2.418,46,0.722,49,0.991,84,1.446,85,1.756,90,3.343,98,2.723,103,1.487,106,1.947,117,1.487,118,2.762,120,2.723,139,1.341,200,3.105,209,1.653,210,2.371,217,3.616,218,1.653,293,2.696,300,2.418,301,3.616,302,2.762,303,4.392,304,3.355,305,3.355,306,3.616,307,2.762]],["title/classes/PatchPostDto.html",[13,0.019,308,1.858]],["body/classes/PatchPostDto.html",[3,0.446,4,0.384,5,0.384,7,0.646,8,0.039,12,0.446,13,0.029,16,0.029,17,0.029,46,0.734,49,1.008,84,1.008,90,3.361,102,1.879,103,1.512,105,2.412,106,1.968,117,1.512,119,1.776,139,1.365,163,2.81,203,2.753,209,1.681,213,2.116,216,3.657,218,1.681,293,2.445,306,3.657,308,2.753,309,3.657,310,3.657,311,4.442,312,4.442,313,3.413,314,3.413,315,2.81,316,2.81,317,2.81]],["title/classes/PatchUserDto.html",[13,0.019,318,1.858]],["body/classes/PatchUserDto.html",[3,0.529,4,0.455,5,0.455,7,0.646,8,0.038,12,0.529,13,0.026,16,0.032,17,0.032,103,1.791,213,2.505,273,2.224,275,2.856,310,4.068,315,3.327,318,3.063,319,3.327,320,4.942,321,3.327,322,3.327,323,3.327]],["title/controllers/PostsController.html",[0,1.083,324,1.858]],["body/controllers/PostsController.html",[0,0.81,2,0.81,3,0.293,4,0.252,5,0.252,7,0.608,8,0.039,9,0.538,12,0.293,13,0.014,14,1.234,15,1.104,16,0.021,17,0.021,46,0.482,47,1.633,49,1.165,51,1.943,52,1.425,53,1.104,58,1.584,75,2.907,82,2.171,83,2.171,84,1.165,85,1.577,102,2.68,114,2.343,117,1.748,119,2.068,139,1.742,213,2.055,218,1.104,308,3.018,316,2.729,317,1.845,324,2.055,325,1.845,326,1.845,327,2.729,328,3.315,329,3.315,330,2.241,331,3.315,332,2.343,333,3.315,334,3.315,335,3.588,336,2.241,337,2.241,338,3.315,339,2.241,340,3.315,341,2.241,342,2.729,343,2.241,344,3.315,345,2.729,346,2.241,347,2.241,348,1.845,349,1.845,350,2.729,351,1.943,352,1.845,353,3.247,354,3.247,355,1.845,356,1.845,357,1.845,358,2.241,359,2.241,360,2.241,361,2.241,362,2.729,363,2.241,364,2.241,365,2.241,366,2.241,367,2.241]],["title/modules/PostsModule.html",[18,1.083,31,1.65]],["body/modules/PostsModule.html",[2,1.57,3,0.431,4,0.371,5,0.371,7,0.675,8,0.039,9,0.791,12,0.431,13,0.021,16,0.028,17,0.028,18,1.755,20,1.462,21,1.462,22,1.816,23,1.816,24,1.462,25,2.674,26,1.816,31,3.137,32,2.441,33,2.391,34,1.816,35,1.625,37,2.693,70,2.716,324,3.011,351,2.713,352,2.716,368,2.716,369,3.299,370,2.716,371,3.299,372,3.299]],["title/injectables/PostsService.html",[43,1.083,351,1.477]],["body/injectables/PostsService.html",[3,0.366,4,0.315,5,0.315,7,0.508,8,0.039,9,0.671,12,0.366,13,0.018,14,1.54,15,1.378,16,0.025,17,0.025,43,1.404,44,1.54,46,0.602,47,1.914,49,1.318,51,1.914,52,1.743,53,1.914,75,2.887,78,2.302,79,2.302,80,2.151,82,2.139,83,2.139,84,1.147,85,1.553,94,2.302,97,2.302,98,3.142,107,3.198,116,3.198,119,2.026,255,1.977,326,2.302,327,3.971,342,2.302,351,2.199,373,2.302,374,3.198,375,2.797,376,2.797,377,3.885,378,2.797,379,2.797,380,2.797,381,3.198,382,3.885,383,2.302,384,2.302]],["title/controllers/UsersController.html",[0,1.083,385,1.858]],["body/controllers/UsersController.html",[0,0.634,2,0.994,3,0.229,4,0.197,5,0.197,7,0.579,8,0.039,9,0.421,12,0.229,13,0.011,14,0.965,15,0.864,16,0.018,17,0.018,39,2.546,46,0.377,47,1.355,49,1.001,51,1.671,52,0.634,53,2.054,58,1.24,75,2.71,80,1.356,82,1.867,83,2.295,84,1.366,85,1.356,114,1.24,117,1.503,119,1.535,120,2.38,132,3.161,133,3.161,139,1.769,142,2.968,218,0.864,244,2.264,255,1.943,273,2.435,293,2.948,300,2.435,318,2.968,323,2.264,332,1.943,335,2.264,345,2.264,348,1.444,349,2.264,350,2.792,353,2.264,354,2.264,355,1.444,356,1.444,357,1.444,362,1.444,381,2.264,383,1.444,384,1.444,385,1.704,386,1.444,387,2.749,388,3.391,389,2.749,390,1.754,391,1.754,392,1.754,393,3.642,394,1.754,395,2.749,396,2.749,397,2.749,398,1.754,399,1.754,400,2.749,401,2.749,402,2.749,403,3.391,404,1.754,405,2.749,406,2.749,407,1.754,408,1.754,409,1.754,410,3.391,411,1.754,412,1.444,413,1.444,414,1.444,415,3.391,416,1.754,417,1.754,418,1.754,419,1.754,420,1.754,421,1.754,422,1.754,423,1.754,424,1.754,425,1.754,426,1.754,427,1.444,428,1.754,429,1.754,430,1.754,431,1.754,432,1.754,433,1.754,434,1.754,435,1.754,436,1.754,437,1.754]],["title/modules/UsersModule.html",[18,1.083,32,1.329]],["body/modules/UsersModule.html",[2,1.536,3,0.418,4,0.359,5,0.359,7,0.666,8,0.039,9,0.766,12,0.418,13,0.021,16,0.027,17,0.027,18,1.727,20,1.415,21,1.415,22,1.757,23,1.757,24,1.415,25,2.631,26,2.631,30,2.094,32,2.468,33,2.34,34,1.757,35,1.573,37,1.979,68,2.635,71,2.256,72,2.256,73,2.256,80,2.349,385,2.962,414,2.628,438,2.628,439,2.628,440,2.628,441,3.192,442,3.192,443,3.192]],["title/injectables/UsersService.html",[43,1.083,80,1.199]],["body/injectables/UsersService.html",[3,0.307,4,0.264,5,0.264,7,0.53,8,0.039,9,0.563,12,0.307,13,0.026,16,0.022,17,0.022,39,2.609,43,1.239,44,1.293,46,0.505,47,1.69,49,1.013,51,1.69,52,1.713,53,1.69,60,1.041,68,1.456,75,2.725,80,1.371,82,1.888,83,1.888,84,1.013,85,1.371,90,2.938,92,3.15,93,1.933,98,2.762,139,0.939,142,2.512,276,3.668,293,2.814,300,2.725,307,1.933,374,3.336,393,3.336,412,1.933,413,1.933,444,1.933,445,3.43,446,2.823,447,3.43,448,3.43,449,3.43,450,3.43,451,2.348,452,2.348,453,3.43,454,3.43,455,3.43,456,3.43,457,2.348,458,3.43,459,3.43,460,2.823,461,2.348,462,2.348,463,2.348,464,3.43,465,3.43]],["title/coverage.html",[466,2.88]],["body/coverage.html",[0,1.762,1,1.778,5,0.323,6,2.361,8,0.038,10,1.413,13,0.034,16,0.026,17,0.026,24,1.271,39,1.579,43,1.762,45,2.361,56,1.778,57,2.361,60,1.271,74,2.361,80,1.147,84,0.847,102,1.579,104,2.794,105,2.794,119,1.147,129,1.778,214,2.027,240,2.361,269,2.361,273,1.579,274,2.361,275,2.794,300,1.579,301,2.361,302,2.361,308,1.778,309,2.361,318,1.778,319,2.361,324,1.778,325,2.361,332,2.027,351,1.413,373,2.361,385,1.778,386,2.361,444,2.361,446,2.361,466,2.027,467,2.361,468,2.868,469,5.85,470,4.875,471,4.523,472,4.875,473,2.361,474,2.868,475,2.868,476,2.868,477,2.868,478,2.868,479,2.868,480,2.868]],["title/dependencies.html",[21,1.596,481,2.068]],["body/dependencies.html",[8,0.039,9,0.931,13,0.031,16,0.031,17,0.031,21,1.72,209,1.913,210,2.744,218,1.913,246,3.196,321,3.196,322,3.196,482,3.882,483,3.882,484,5.244,485,3.882,486,3.882,487,3.882,488,3.882,489,3.882,490,3.882,491,3.882,492,3.882,493,3.882,494,3.882,495,3.882]],["title/miscellaneous/enumerations.html",[496,1.557,497,2.965]],["body/miscellaneous/enumerations.html",[8,0.038,16,0.031,17,0.031,46,0.807,110,3.886,119,1.887,142,2.926,143,3.886,147,3.886,182,3.886,183,3.886,184,3.886,185,3.886,221,3.886,243,4.136,496,2.327,497,3.09,498,3.753,499,3.753,500,3.753,501,3.753]],["title/miscellaneous/functions.html",[496,1.557,502,2.965]],["body/miscellaneous/functions.html",[8,0.034,16,0.034,17,0.034,24,2.477,46,0.968,473,3.706,496,2.79,502,3.706,503,4.501]],["title/index.html",[46,0.54,504,2.512,505,2.512]],["body/index.html",[4,0.218,8,0.036,16,0.019,17,0.019,35,2.27,120,2.511,139,0.775,140,1.596,164,1.596,167,1.596,169,1.596,239,1.371,258,1.596,427,3.794,460,1.596,466,1.371,467,2.447,506,1.939,507,1.939,508,3.613,509,2.972,510,1.939,511,1.939,512,1.939,513,1.939,514,2.972,515,3.613,516,1.939,517,1.939,518,1.939,519,4.051,520,1.939,521,4.949,522,1.939,523,4.797,524,1.939,525,1.939,526,1.939,527,2.972,528,1.939,529,2.972,530,1.939,531,3.613,532,1.939,533,2.972,534,1.939,535,1.939,536,1.939,537,1.939,538,1.939,539,4.051,540,4.949,541,2.972,542,1.939,543,1.939,544,1.939,545,1.939,546,4.608,547,2.972,548,4.051,549,1.939,550,2.972,551,1.939,552,1.939,553,2.972,554,4.608,555,4.051,556,1.939,557,2.972,558,1.939,559,1.939,560,1.939,561,1.939,562,4.051,563,1.939,564,1.939,565,1.939,566,1.939,567,2.972,568,1.939,569,1.939,570,1.939,571,1.939,572,1.939,573,2.972,574,1.939,575,1.939,576,1.939,577,2.972,578,1.939,579,1.939,580,3.335,581,2.972,582,1.939,583,1.939,584,1.939,585,1.939,586,1.939,587,1.939,588,1.939,589,1.939,590,2.972,591,1.939,592,1.939,593,1.939,594,1.939,595,3.613,596,1.939,597,1.939,598,1.939,599,1.939,600,2.972,601,1.939,602,1.939,603,1.939,604,1.939,605,1.939,606,2.972,607,1.939,608,1.939,609,1.939,610,2.972,611,2.972,612,1.939,613,1.939,614,1.939,615,1.939,616,1.939,617,1.939,618,1.939,619,1.939,620,1.939,621,1.596,622,1.939,623,1.939,624,1.939,625,1.939,626,1.939,627,1.596]],["title/modules.html",[20,1.806]],["body/modules.html",[8,0.033,16,0.033,17,0.033,19,2.598,20,1.857,30,2.065,31,2.307,32,1.857,580,4.636,628,5.631,629,5.631,630,5.631]],["title/overview.html",[631,3.355]],["body/overview.html",[2,1.105,8,0.038,10,2.303,16,0.027,17,0.027,18,1.105,19,3.557,20,1.354,21,1.354,22,1.682,23,1.682,24,1.354,25,1.682,26,1.682,27,2.516,28,2.516,29,2.516,30,2.655,31,3.032,32,2.441,33,2.273,34,1.682,35,1.506,44,1.682,60,2.441,64,2.516,65,2.516,66,2.516,80,2.203,103,1.354,351,2.303,368,2.516,370,2.516,438,2.516,439,2.516,440,2.516,631,2.516,632,4.675,633,3.056]],["title/properties.html",[106,1.596,481,2.068]],["body/properties.html",[8,0.038,16,0.034,17,0.034,106,1.961,139,1.77,621,3.644,627,3.644,634,4.426,635,4.426,636,4.426]]],"invertedIndex":[["",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":469,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":635,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":491,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":493,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":490,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":470,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":476,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":471,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":475,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":472,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":477,"title":{},"body":{"coverage.html":{}}}],["03",{"_index":149,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["1",{"_index":381,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["1.1.23",{"_index":483,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":429,"title":{},"body":{"controllers/UsersController.html":{}}}],["10.0.0",{"_index":484,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":478,"title":{},"body":{"coverage.html":{}}}],["10})@apiquery({name",{"_index":404,"title":{},"body":{"controllers/UsersController.html":{}}}],["1234",{"_index":307,"title":{},"body":{"classes/GetUsersParamDto.html":{},"injectables/UsersService.html":{}}}],["1234})@isoptional()@isint()@type(undefined",{"_index":304,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["16t07:46:32+0000",{"_index":229,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["16t07:46:32+0000'})@isiso8601()@isoptional",{"_index":150,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["2",{"_index":382,"title":{},"body":{"injectables/PostsService.html":{}}}],["2.0.5",{"_index":486,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":345,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["201",{"_index":334,"title":{},"body":{"controllers/PostsController.html":{}}}],["2024",{"_index":148,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3",{"_index":237,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["3/3",{"_index":479,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":632,"title":{},"body":{"overview.html":{}}}],["6",{"_index":633,"title":{},"body":{"overview.html":{}}}],["7.3.0",{"_index":489,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":495,"title":{},"body":{"dependencies.html":{}}}],["8601",{"_index":231,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["9",{"_index":174,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["against",{"_index":265,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["alice",{"_index":464,"title":{},"body":{"injectables/UsersService.html":{}}}],["alice@doe.com",{"_index":465,"title":{},"body":{"injectables/UsersService.html":{}}}],["allowing",{"_index":568,"title":{},"body":{"index.html":{}}}],["amazing",{"_index":616,"title":{},"body":{"index.html":{}}}],["api",{"_index":406,"title":{},"body":{"controllers/UsersController.html":{}}}],["apioperation",{"_index":353,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":331,"title":{},"body":{"controllers/PostsController.html":{}}}],["apiproperty",{"_index":216,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({description",{"_index":163,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{}}}],["apiproperty({enum",{"_index":138,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apipropertyoptional",{"_index":217,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({description",{"_index":118,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{}}}],["apipropertyoptional({type",{"_index":130,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["apiquery",{"_index":415,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":354,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":355,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["apitags('posts",{"_index":359,"title":{},"body":{"controllers/PostsController.html":{}}}],["apitags('users",{"_index":420,"title":{},"body":{"controllers/UsersController.html":{}}}],["app.controller",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":427,"title":{},"body":{"controllers/UsersController.html":{},"index.html":{}}}],["application'})@apiresponse({status",{"_index":398,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":514,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":19,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":10,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["array",{"_index":131,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["auth",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":56,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authmodule",{"_index":30,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":621,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":60,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["authservice:authservice",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{}}}],["avoid",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["aws",{"_index":557,"title":{},"body":{"index.html":{}}}],["backers",{"_index":617,"title":{},"body":{"index.html":{}}}],["based",{"_index":552,"title":{},"body":{"index.html":{}}}],["blog",{"_index":171,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["board",{"_index":609,"title":{},"body":{"index.html":{}}}],["body",{"_index":348,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":87,"title":{},"body":{"injectables/AuthService.html":{}}}],["bootstrap",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":630,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":628,"title":{},"body":{"modules.html":{}}}],["building",{"_index":509,"title":{},"body":{"index.html":{}}}],["business",{"_index":448,"title":{},"body":{"injectables/UsersService.html":{}}}],["channel",{"_index":583,"title":{},"body":{"index.html":{}}}],["characters",{"_index":238,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["check",{"_index":546,"title":{},"body":{"index.html":{}}}],["circular",{"_index":72,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["class",{"_index":13,"title":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":103,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"overview.html":{}}}],["clicks",{"_index":567,"title":{},"body":{"index.html":{}}}],["cloud",{"_index":551,"title":{},"body":{"index.html":{}}}],["cluster_appmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":64,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":65,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":66,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_postsmodule",{"_index":368,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_postsmodule_imports",{"_index":369,"title":{},"body":{"modules/PostsModule.html":{}}}],["cluster_postsmodule_providers",{"_index":370,"title":{},"body":{"modules/PostsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":438,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":439,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":440,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["come",{"_index":574,"title":{},"body":{"index.html":{}}}],["comes",{"_index":262,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["compodoc/compodoc",{"_index":482,"title":{},"body":{"dependencies.html":{}}}],["connect",{"_index":445,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log(createpostdto",{"_index":365,"title":{},"body":{"controllers/PostsController.html":{}}}],["console.log(createuserdto",{"_index":436,"title":{},"body":{"controllers/UsersController.html":{}}}],["console.log(patchpostdto",{"_index":367,"title":{},"body":{"controllers/PostsController.html":{}}}],["const",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["constructor",{"_index":78,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["constructor(private",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":79,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["contain",{"_index":266,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["content",{"_index":107,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["context",{"_index":158,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('posts",{"_index":358,"title":{},"body":{"controllers/PostsController.html":{}}}],["controller('users",{"_index":419,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["courses",{"_index":589,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":466,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":213,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{}}}],["created",{"_index":363,"title":{},"body":{"controllers/PostsController.html":{}}}],["created.'})@post",{"_index":336,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost",{"_index":327,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["createpost(@body",{"_index":364,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpost(createpostdto",{"_index":330,"title":{},"body":{"controllers/PostsController.html":{}}}],["createpostdto",{"_index":102,"title":{"classes/CreatePostDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["createpostmetaoptionsdto",{"_index":129,"title":{"classes/CreatePostMetaOptionsDto.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["creates",{"_index":259,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["createuser",{"_index":387,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(@body",{"_index":435,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuser(createuserdto",{"_index":390,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":273,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["data",{"_index":454,"title":{},"body":{"injectables/UsersService.html":{}}}],["database",{"_index":455,"title":{},"body":{"injectables/UsersService.html":{}}}],["date",{"_index":146,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["declarations",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorator",{"_index":251,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["decorators",{"_index":117,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["deeper",{"_index":585,"title":{},"body":{"index.html":{}}}],["defaultvaluepipe",{"_index":411,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(1",{"_index":433,"title":{},"body":{"controllers/UsersController.html":{}}}],["defaultvaluepipe(10",{"_index":431,"title":{},"body":{"controllers/UsersController.html":{}}}],["defined",{"_index":49,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":21,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":73,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["deploy",{"_index":539,"title":{},"body":{"index.html":{}}}],["deploying",{"_index":556,"title":{},"body":{"index.html":{}}}],["deployment",{"_index":547,"title":{},"body":{"index.html":{}}}],["deploywith",{"_index":566,"title":{},"body":{"index.html":{}}}],["description",{"_index":139,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":524,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":596,"title":{},"body":{"index.html":{}}}],["discord",{"_index":582,"title":{},"body":{"index.html":{}}}],["dive",{"_index":584,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":467,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["draft",{"_index":183,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["dto",{"_index":256,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["dtos/create",{"_index":356,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["dtos/get",{"_index":412,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos/patch",{"_index":357,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["e2e",{"_index":534,"title":{},"body":{"index.html":{}}}],["each",{"_index":192,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["easy",{"_index":168,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["efficient",{"_index":510,"title":{},"body":{"index.html":{}}}],["efficiently",{"_index":545,"title":{},"body":{"index.html":{}}}],["email",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["endpoint",{"_index":384,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["ensure",{"_index":543,"title":{},"body":{"index.html":{}}}],["enterprise",{"_index":599,"title":{},"body":{"index.html":{}}}],["entries",{"_index":400,"title":{},"body":{"controllers/UsersController.html":{}}}],["enum",{"_index":220,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enumerations",{"_index":497,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/poststatus.enum",{"_index":212,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["enums/posttype.enum",{"_index":211,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["error",{"_index":156,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["example",{"_index":120,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["experience",{"_index":587,"title":{},"body":{"index.html":{}}}],["export",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":488,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":310,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["false",{"_index":133,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["fast",{"_index":560,"title":{},"body":{"index.html":{}}}],["featured",{"_index":125,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["featuredimageurl",{"_index":108,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["features",{"_index":570,"title":{},"body":{"index.html":{}}}],["fetched",{"_index":428,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetched'})@apiquery({name",{"_index":399,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetches",{"_index":395,"title":{},"body":{"controllers/UsersController.html":{}}}],["few",{"_index":562,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["find",{"_index":458,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall",{"_index":374,"title":{},"body":{"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["findall(getusersparamdto",{"_index":451,"title":{},"body":{"injectables/UsersService.html":{}}}],["findall(userid",{"_index":377,"title":{},"body":{"injectables/PostsService.html":{}}}],["findonebyid",{"_index":450,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":456,"title":{},"body":{"injectables/UsersService.html":{}}}],["first",{"_index":121,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["firstname",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{}}}],["focus",{"_index":569,"title":{},"body":{"index.html":{}}}],["follow",{"_index":603,"title":{},"body":{"index.html":{}}}],["form",{"_index":170,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["format",{"_index":232,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["forwardref",{"_index":68,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":508,"title":{},"body":{"index.html":{}}}],["full",{"_index":598,"title":{},"body":{"index.html":{}}}],["function",{"_index":474,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":502,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":565,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":426,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:id?')@apioperation({summary",{"_index":394,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/:userid",{"_index":340,"title":{},"body":{"controllers/PostsController.html":{}}}],["gethello",{"_index":48,"title":{},"body":{"injectables/AppService.html":{}}}],["getposts",{"_index":328,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(@param('userid",{"_index":360,"title":{},"body":{"controllers/PostsController.html":{}}}],["getposts(userid",{"_index":339,"title":{},"body":{"controllers/PostsController.html":{}}}],["getting",{"_index":504,"title":{"index.html":{}},"body":{}}],["getusers",{"_index":388,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusers(getusersparamdto",{"_index":392,"title":{},"body":{"controllers/UsersController.html":{}}}],["getusersparamdto",{"_index":300,"title":{"classes/GetUsersParamDto.html":{}},"body":{"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["graph",{"_index":592,"title":{},"body":{"index.html":{}}}],["grow",{"_index":613,"title":{},"body":{"index.html":{}}}],["hands",{"_index":586,"title":{},"body":{"index.html":{}}}],["handy",{"_index":575,"title":{},"body":{"index.html":{}}}],["hello",{"_index":54,"title":{},"body":{"injectables/AppService.html":{}}}],["help",{"_index":590,"title":{},"body":{"index.html":{}}}],["here",{"_index":258,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["hold",{"_index":416,"title":{},"body":{"controllers/UsersController.html":{}}}],["http://localhost.com/images/image1.jpg",{"_index":228,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["http://localhost.com/images/image1.jpg'})@isurl()@isoptional",{"_index":127,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https://nestjs.com",{"_index":624,"title":{},"body":{"index.html":{}}}],["https://schema.org",{"_index":159,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["https:\\/\\/schema.org\\\",\\r\\n",{"_index":226,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["id",{"_index":90,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":240,"title":{},"body":{"classes/CreatePostDto.html":{},"coverage.html":{}}}],["identifies",{"_index":165,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["image",{"_index":126,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["import",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}}}],["incoming",{"_index":254,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["index",{"_index":46,"title":{"index.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["information",{"_index":549,"title":{},"body":{"index.html":{}}}],["infrastructure",{"_index":572,"title":{},"body":{"index.html":{}}}],["inject",{"_index":93,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["inject(forwardref",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["injectable",{"_index":43,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":44,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injecting",{"_index":379,"title":{},"body":{"injectables/PostsService.html":{}}}],["input",{"_index":423,"title":{},"body":{"controllers/UsersController.html":{}}}],["inside",{"_index":249,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["install",{"_index":564,"title":{},"body":{"index.html":{}}}],["installcompile",{"_index":522,"title":{},"body":{"index.html":{}}}],["instance",{"_index":260,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["interact",{"_index":593,"title":{},"body":{"index.html":{}}}],["isarray",{"_index":198,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isauth",{"_index":76,"title":{},"body":{"injectables/AuthService.html":{}}}],["isdate",{"_index":199,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isemail",{"_index":295,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isemail()@isnotempty",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":197,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(poststatus",{"_index":224,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isenum(posttype",{"_index":222,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isint",{"_index":306,"title":{},"body":{"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{}}}],["isiso8601",{"_index":207,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isjson",{"_index":205,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isnotempty",{"_index":203,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/PatchPostDto.html":{}}}],["iso",{"_index":230,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isobject",{"_index":201,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isoptional",{"_index":200,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{}}}],["isoptional()@isjson",{"_index":161,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["isstring",{"_index":196,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty",{"_index":270,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["isstring()@isnotempty()@minlength(3)@maxlength(96",{"_index":280,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(8)@matches(/^(?=.*[a",{"_index":284,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@isoptional()@minlength(3)@maxlength(96",{"_index":282,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isurl",{"_index":206,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["item",{"_index":235,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["items",{"_index":134,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["job",{"_index":606,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":608,"title":{},"body":{"index.html":{}}}],["john",{"_index":462,"title":{},"body":{"injectables/UsersService.html":{}}}],["john@doe.com",{"_index":463,"title":{},"body":{"injectables/UsersService.html":{}}}],["join",{"_index":619,"title":{},"body":{"index.html":{}}}],["json",{"_index":153,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["kamil",{"_index":622,"title":{},"body":{"index.html":{}}}],["key",{"_index":239,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"index.html":{}}}],["lastname",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["learn",{"_index":578,"title":{},"body":{"index.html":{}}}],["legend",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["letter",{"_index":291,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letters",{"_index":177,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["license",{"_index":627,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":611,"title":{},"body":{"index.html":{}}}],["limit",{"_index":393,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["linkedin",{"_index":605,"title":{},"body":{"index.html":{}}}],["list",{"_index":396,"title":{},"body":{"controllers/UsersController.html":{}}}],["logic",{"_index":418,"title":{},"body":{"controllers/UsersController.html":{}}}],["login",{"_index":77,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(email",{"_index":88,"title":{},"body":{"injectables/AuthService.html":{}}}],["looking",{"_index":550,"title":{},"body":{"index.html":{}}}],["loop",{"_index":601,"title":{},"body":{"index.html":{}}}],["lowercase",{"_index":292,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["makes",{"_index":558,"title":{},"body":{"index.html":{}}}],["managing",{"_index":571,"title":{},"body":{"index.html":{}}}],["match",{"_index":267,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matches",{"_index":204,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["matches(/^(?=.*[a",{"_index":299,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["matches(/^[a",{"_index":223,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["matching",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["mau",{"_index":554,"title":{},"body":{"index.html":{}}}],["maxlength",{"_index":296,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(96",{"_index":297,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["means",{"_index":234,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["message",{"_index":175,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["meta",{"_index":214,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["metadata",{"_index":246,"title":{},"body":{"classes/CreatePostDto.html":{},"dependencies.html":{}}}],["metaoptions",{"_index":109,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["method",{"_index":453,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":47,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":202,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(3",{"_index":236,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{}}}],["minlength(4",{"_index":219,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["minlength(8",{"_index":298,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":496,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":610,"title":{},"body":{"index.html":{}}}],["mode",{"_index":527,"title":{},"body":{"index.html":{}}}],["module",{"_index":18,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":20,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":548,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":623,"title":{},"body":{"index.html":{}}}],["name",{"_index":83,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["need",{"_index":597,"title":{},"body":{"index.html":{}}}],["needs",{"_index":312,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["nest",{"_index":515,"title":{},"body":{"index.html":{}}}],["nested",{"_index":250,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["nestframework",{"_index":626,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":540,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":485,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mapped",{"_index":321,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":487,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":218,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["new",{"_index":332,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["node.js",{"_index":507,"title":{},"body":{"index.html":{}}}],["npm",{"_index":521,"title":{},"body":{"index.html":{}}}],["number",{"_index":293,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["object",{"_index":154,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["objects",{"_index":248,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["offer",{"_index":607,"title":{},"body":{"index.html":{}}}],["official",{"_index":555,"title":{},"body":{"index.html":{}}}],["one",{"_index":289,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["open",{"_index":612,"title":{},"body":{"index.html":{}}}],["operations",{"_index":449,"title":{},"body":{"injectables/UsersService.html":{}}}],["option",{"_index":241,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["optional",{"_index":85,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":247,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto",{"_index":215,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["options.dto.ts",{"_index":269,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["options.dto.ts:6",{"_index":271,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["options.dto.ts:9",{"_index":272,"title":{},"body":{"classes/CreatePostMetaOptionsDto.html":{}}}],["out",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"overview.html":{}}}],["over",{"_index":257,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["overview",{"_index":631,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":481,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":142,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":349,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["param.dto",{"_index":413,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param.dto.ts",{"_index":302,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["param.dto.ts:13",{"_index":305,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["parameters",{"_index":82,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":410,"title":{},"body":{"controllers/UsersController.html":{}}}],["part",{"_index":164,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["partialtype",{"_index":315,"title":{},"body":{"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{}}}],["partialtype(createpostdto",{"_index":311,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["partialtype(createuserdto",{"_index":320,"title":{},"body":{"classes/PatchUserDto.html":{}}}],["particular",{"_index":166,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["passed",{"_index":188,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["password",{"_index":89,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{}}}],["patch",{"_index":350,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["patchpostdto",{"_index":308,"title":{"classes/PatchPostDto.html":{}},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"coverage.html":{}}}],["patchuser",{"_index":389,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(@body",{"_index":437,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuser(patchuserdto",{"_index":408,"title":{},"body":{"controllers/UsersController.html":{}}}],["patchuserdto",{"_index":318,"title":{"classes/PatchUserDto.html":{}},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["per",{"_index":402,"title":{},"body":{"controllers/UsersController.html":{}}}],["perform",{"_index":447,"title":{},"body":{"injectables/UsersService.html":{}}}],["person",{"_index":160,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["person\\\"\\r\\n",{"_index":227,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["platform",{"_index":553,"title":{},"body":{"index.html":{}}}],["please",{"_index":581,"title":{},"body":{"index.html":{}}}],["position",{"_index":405,"title":{},"body":{"controllers/UsersController.html":{}}}],["possible",{"_index":140,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["post",{"_index":119,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["post'})@apiresponse({status",{"_index":333,"title":{},"body":{"controllers/PostsController.html":{}}}],["post'})@isstring()@isnotempty()@matches(/^[a",{"_index":172,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@isoptional",{"_index":122,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post'})@isstring()@minlength(4)@isnotempty",{"_index":194,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto",{"_index":316,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["post.dto.ts",{"_index":105,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/PatchPostDto.html":{},"coverage.html":{}}}],["post.dto.ts:103",{"_index":193,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:134",{"_index":137,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:15",{"_index":314,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["post.dto.ts:30",{"_index":195,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:38",{"_index":145,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:51",{"_index":181,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:59",{"_index":187,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:67",{"_index":123,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:77",{"_index":162,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:85",{"_index":128,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["post.dto.ts:93",{"_index":151,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["posts",{"_index":326,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["posts.controller",{"_index":372,"title":{},"body":{"modules/PostsModule.html":{}}}],["posts/posts.module",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["postscontroller",{"_index":324,"title":{"controllers/PostsController.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"coverage.html":{}}}],["postsmodule",{"_index":31,"title":{"modules/PostsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/PostsModule.html":{},"modules.html":{},"overview.html":{}}}],["postsservice",{"_index":351,"title":{"injectables/PostsService.html":{}},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"coverage.html":{},"overview.html":{}}}],["poststatus",{"_index":182,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["posttype",{"_index":110,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["prefix",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["private",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{}}}],["production",{"_index":529,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":506,"title":{},"body":{"index.html":{}}}],["project",{"_index":519,"title":{},"body":{"index.html":{}}}],["properties",{"_index":106,"title":{"properties.html":{}},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"properties.html":{}}}],["providers",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/auth.service",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["providers/posts.service",{"_index":352,"title":{},"body":{"controllers/PostsController.html":{},"modules/PostsModule.html":{}}}],["providers/users.service",{"_index":414,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":75,"title":{},"body":{"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["published",{"_index":147,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["published'})@isenum(poststatus)@isnotempty",{"_index":186,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["publishedon",{"_index":111,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["query",{"_index":403,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('limit",{"_index":430,"title":{},"body":{"controllers/UsersController.html":{}}}],["query('page",{"_index":432,"title":{},"body":{"controllers/UsersController.html":{}}}],["questions",{"_index":579,"title":{},"body":{"index.html":{}}}],["r\\n",{"_index":225,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["read",{"_index":169,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["readonly",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["ready",{"_index":538,"title":{},"body":{"index.html":{}}}],["real",{"_index":594,"title":{},"body":{"index.html":{}}}],["receives",{"_index":421,"title":{},"body":{"controllers/UsersController.html":{}}}],["reflect",{"_index":492,"title":{},"body":{"dependencies.html":{}}}],["registered",{"_index":397,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":518,"title":{},"body":{"index.html":{}}}],["request",{"_index":255,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":132,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["requiring",{"_index":561,"title":{},"body":{"index.html":{}}}],["reset",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resources",{"_index":573,"title":{},"body":{"index.html":{}}}],["results",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":53,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returned",{"_index":401,"title":{},"body":{"controllers/UsersController.html":{}}}],["returns",{"_index":51,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["review",{"_index":185,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["routing",{"_index":417,"title":{},"body":{"controllers/UsersController.html":{}}}],["run",{"_index":523,"title":{},"body":{"index.html":{}}}],["runs",{"_index":544,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":494,"title":{},"body":{"dependencies.html":{}}}],["sample_token",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["save",{"_index":245,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["scalable",{"_index":511,"title":{},"body":{"index.html":{}}}],["scheduled",{"_index":184,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["schema",{"_index":112,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["secondly",{"_index":263,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["sends",{"_index":424,"title":{},"body":{"controllers/UsersController.html":{}}}],["sent",{"_index":383,"title":{},"body":{"injectables/PostsService.html":{},"controllers/UsersController.html":{}}}],["serialize",{"_index":152,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["series",{"_index":221,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["series'})@isenum(posttype)@isnotempty",{"_index":144,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["server",{"_index":512,"title":{},"body":{"index.html":{}}}],["service",{"_index":425,"title":{},"body":{"controllers/UsersController.html":{}}}],["setup",{"_index":520,"title":{},"body":{"index.html":{}}}],["side",{"_index":513,"title":{},"body":{"index.html":{}}}],["sidebarenabled",{"_index":242,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["simple",{"_index":563,"title":{},"body":{"index.html":{}}}],["single",{"_index":459,"title":{},"body":{"injectables/UsersService.html":{}}}],["slug",{"_index":113,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["small",{"_index":176,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"classes/PatchUserDto.html":{},"controllers/PostsController.html":{},"modules/PostsModule.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["spaces",{"_index":180,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["specific",{"_index":303,"title":{},"body":{"classes/GetUsersParamDto.html":{}}}],["sponsors",{"_index":615,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":503,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../poststatus.enum.ts",{"_index":498,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../posttype.enum.ts",{"_index":499,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.module.ts",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":45,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":50,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.module",{"_index":443,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":67,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/providers/auth.service",{"_index":461,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/auth/providers/auth.service.ts",{"_index":74,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/providers/auth.service.ts:12",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:17",{"_index":86,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/providers/auth.service.ts:5",{"_index":81,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/main.ts",{"_index":473,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/posts/dtos/create",{"_index":104,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"coverage.html":{}}}],["src/posts/dtos/patch",{"_index":309,"title":{},"body":{"classes/PatchPostDto.html":{},"coverage.html":{}}}],["src/posts/enums/poststatus.enum.ts",{"_index":500,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/enums/posttype.enum.ts",{"_index":501,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/posts/posts.controller.ts",{"_index":325,"title":{},"body":{"controllers/PostsController.html":{},"coverage.html":{}}}],["src/posts/posts.controller.ts:13",{"_index":341,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:23",{"_index":337,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.controller.ts:33",{"_index":347,"title":{},"body":{"controllers/PostsController.html":{}}}],["src/posts/posts.module.ts",{"_index":371,"title":{},"body":{"modules/PostsModule.html":{}}}],["src/posts/providers/posts.service.ts",{"_index":373,"title":{},"body":{"injectables/PostsService.html":{},"coverage.html":{}}}],["src/posts/providers/posts.service.ts:25",{"_index":376,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:5",{"_index":375,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/posts/providers/posts.service.ts:9",{"_index":378,"title":{},"body":{"injectables/PostsService.html":{}}}],["src/users/dtos/create",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dtos/get",{"_index":301,"title":{},"body":{"classes/GetUsersParamDto.html":{},"coverage.html":{}}}],["src/users/dtos/patch",{"_index":319,"title":{},"body":{"classes/PatchUserDto.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts",{"_index":444,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/providers/users.service.ts:13",{"_index":452,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/providers/users.service.ts:33",{"_index":457,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.controller.ts",{"_index":386,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:48",{"_index":407,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:57",{"_index":391,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:63",{"_index":409,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"modules/PostsModule.html":{}}}],["src/users/users.module.ts",{"_index":441,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":525,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":528,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":530,"title":{},"body":{"index.html":{}}}],["started",{"_index":505,"title":{"index.html":{}},"body":{}}],["starter",{"_index":517,"title":{},"body":{"index.html":{}}}],["statements",{"_index":468,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":114,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["stay",{"_index":600,"title":{},"body":{"index.html":{}}}],["steps",{"_index":541,"title":{},"body":{"index.html":{}}}],["story",{"_index":143,"title":{},"body":{"classes/CreatePostDto.html":{},"miscellaneous/enumerations.html":{}}}],["straightforward",{"_index":559,"title":{},"body":{"index.html":{}}}],["string",{"_index":52,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["successfully",{"_index":335,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":362,"title":{},"body":{"controllers/PostsController.html":{},"controllers/UsersController.html":{}}}],["support",{"_index":580,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":629,"title":{},"body":{"modules.html":{}}}],["table",{"_index":446,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":480,"title":{},"body":{"coverage.html":{}}}],["tag1",{"_index":189,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag2",{"_index":233,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tag2']'})@isstring({each",{"_index":190,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["tags",{"_index":115,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["take",{"_index":542,"title":{},"body":{"index.html":{}}}],["test",{"_index":533,"title":{},"body":{"index.html":{}}}],["test:covdeployment",{"_index":536,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":535,"title":{},"body":{"index.html":{}}}],["tests",{"_index":531,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":614,"title":{},"body":{"index.html":{}}}],["things",{"_index":253,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["this.postsservice.findall(userid",{"_index":361,"title":{},"body":{"controllers/PostsController.html":{}}}],["this.usersservice.findall(getusersparamdto",{"_index":434,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid('1234",{"_index":99,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findonebyid(userid",{"_index":380,"title":{},"body":{"injectables/PostsService.html":{}}}],["thrown",{"_index":157,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["time",{"_index":595,"title":{},"body":{"index.html":{}}}],["title",{"_index":116,"title":{},"body":{"classes/CreatePostDto.html":{},"injectables/PostsService.html":{}}}],["touch",{"_index":620,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":210,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/GetUsersParamDto.html":{},"dependencies.html":{}}}],["true",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{}}}],["true})@isarray()@isoptional()@minlength(3",{"_index":191,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["true})@type(undefined",{"_index":136,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["twitter",{"_index":625,"title":{},"body":{"index.html":{}}}],["two",{"_index":252,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["type",{"_index":84,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"controllers/PostsController.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["types",{"_index":322,"title":{},"body":{"classes/PatchUserDto.html":{},"dependencies.html":{}}}],["typescript",{"_index":516,"title":{},"body":{"index.html":{}}}],["undefined})@isoptional()@isarray()@validatenested({each",{"_index":135,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["unit",{"_index":532,"title":{},"body":{"index.html":{}}}],["unlicensed",{"_index":636,"title":{},"body":{"properties.html":{}}}],["update",{"_index":344,"title":{},"body":{"controllers/PostsController.html":{}}}],["updated",{"_index":317,"title":{},"body":{"classes/PatchPostDto.html":{},"controllers/PostsController.html":{}}}],["updated'})@isint()@isnotempty",{"_index":313,"title":{},"body":{"classes/PatchPostDto.html":{}}}],["updated.'})@patch",{"_index":346,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost",{"_index":329,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(@body",{"_index":366,"title":{},"body":{"controllers/PostsController.html":{}}}],["updatepost(patchpostdto",{"_index":343,"title":{},"body":{"controllers/PostsController.html":{}}}],["updates",{"_index":602,"title":{},"body":{"index.html":{}}}],["uppercase",{"_index":290,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["url",{"_index":124,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["user",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{},"classes/GetUsersParamDto.html":{},"injectables/PostsService.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":323,"title":{},"body":{"classes/PatchUserDto.html":{},"controllers/UsersController.html":{}}}],["user.dto.ts",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PatchUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":281,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":283,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:26",{"_index":279,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":294,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["userid",{"_index":342,"title":{},"body":{"controllers/PostsController.html":{},"injectables/PostsService.html":{}}}],["users",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"classes/GetUsersParamDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["users.controller",{"_index":442,"title":{},"body":{"modules/UsersModule.html":{}}}],["users/providers/users.service",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{}}}],["users/users.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":385,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":32,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":80,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/PostsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uses",{"_index":178,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["using",{"_index":460,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{}}}],["validated",{"_index":264,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validatenested",{"_index":208,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validates",{"_index":422,"title":{},"body":{"controllers/UsersController.html":{}}}],["validation",{"_index":155,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validations",{"_index":268,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["validator",{"_index":209,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"classes/CreateUserDto.html":{},"classes/GetUsersParamDto.html":{},"classes/PatchPostDto.html":{},"dependencies.html":{}}}],["value",{"_index":243,"title":{},"body":{"classes/CreatePostDto.html":{},"classes/CreatePostMetaOptionsDto.html":{},"miscellaneous/enumerations.html":{}}}],["values",{"_index":141,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["version",{"_index":634,"title":{},"body":{"properties.html":{}}}],["video",{"_index":588,"title":{},"body":{"index.html":{}}}],["visit",{"_index":577,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":591,"title":{},"body":{"index.html":{}}}],["void",{"_index":338,"title":{},"body":{"controllers/PostsController.html":{}}}],["want",{"_index":244,"title":{},"body":{"classes/CreatePostDto.html":{},"controllers/UsersController.html":{}}}],["watch",{"_index":526,"title":{},"body":{"index.html":{}}}],["website",{"_index":167,"title":{},"body":{"classes/CreatePostDto.html":{},"index.html":{}}}],["whenever",{"_index":261,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["without",{"_index":179,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["working",{"_index":576,"title":{},"body":{"index.html":{}}}],["world",{"_index":55,"title":{},"body":{"injectables/AppService.html":{}}}],["x",{"_index":604,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":618,"title":{},"body":{"index.html":{}}}],["you're",{"_index":537,"title":{},"body":{"index.html":{}}}],["z0",{"_index":173,"title":{},"body":{"classes/CreatePostDto.html":{}}}],["z\\d]{8",{"_index":288,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*[a",{"_index":285,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*\\d)[a",{"_index":286,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["za",{"_index":287,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["zoom",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/PostsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            PostsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n//users modules\nimport { UsersModule } from './users/users.module';\nimport { PostsModule } from './posts/posts.module';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [UsersModule, PostsModule, AuthModule],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { AuthService } from './providers/auth.service';\n\n@Controller('auth')\nexport class AuthController {\n    constructor(private readonly authService:AuthService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './providers/auth.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [AuthController],\n  providers: [AuthService],\n  exports: [AuthService],\n  imports: [forwardRef(() => UsersModule)], //to avoid circular dependency\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/providers/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                isAuth\n                            \n                            \n                                    Public\n                                login\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/providers/auth.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        isAuth\n                        \n                    \n                \n            \n            \n                \n                        \n                    isAuth()\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(email: string, password: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/providers/auth.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { UsersService } from './../../users/providers/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    //to avoid circular dependency\n    @Inject(forwardRef(() => UsersService))\n    private readonly usersService: UsersService,\n  ) {}\n\n  public login(email: string, password: string, id: string): string {\n    const user = this.usersService.findOneById('1234');\n    return 'SAMPLE_TOKEN';\n  }\n\n  public isAuth() {\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostDto.html":{"url":"classes/CreatePostDto.html","title":"class - CreatePostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                content\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                featuredImageUrl\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                metaOptions\n                            \n                            \n                                    \n                                    \n                                    \n                                postType\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                publishedOn\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                schema\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                slug\n                            \n                            \n                                    \n                                    \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                tags\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        content\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The content of the post', example: 'This is my first post'})@IsString()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        featuredImageUrl\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The URL of the featured image', example: 'http://localhost.com/images/image1.jpg'})@IsUrl()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:85\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        metaOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CreatePostMetaOptionsDto[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({type: 'array', required: false, items: undefined})@IsOptional()@IsArray()@ValidateNested({each: true})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:134\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        postType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postType\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postType, description: 'Possible Values: post, page, story, series'})@IsEnum(postType)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        publishedOn\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The date the post was published', example: '2024-03-16T07:46:32+0000'})@IsISO8601()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:93\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        schema\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Serialize your JSON object, else a validation error will be thrown', example: '{\n \"@context\": \"https://schema.org\",\n \"@type\": \"Person\"\n}'})@IsOptional()@IsJSON()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:77\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        slug\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'A slug is a part of a URL that identifies a particular page on a website in an easy to read form. For example, \"my-url\"', example: 'my-blog-post'})@IsString()@IsNotEmpty()@Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {message: 'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         postStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({enum: postStatus, description: 'Possible Values: draft, scheduled, review, published'})@IsEnum(postStatus)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Optional\n                        tags\n                        \n                    \n                \n            \n                \n                    \n                        Type :     string[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Array of tags passed as string values', example: '['tag1', 'tag2']'})@IsString({each: true})@IsArray()@IsOptional()@MinLength(3, {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:103\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        title\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The title of the post', example: 'My first post'})@IsString()@MinLength(4)@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post.dto.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsString,\n  IsEnum,\n  IsArray,\n  IsDate,\n  IsOptional,\n  IsObject,\n  MinLength,\n  IsNotEmpty,\n  Matches,\n  IsJSON,\n  IsUrl,\n  IsISO8601,\n  ValidateNested,\n} from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { postType } from '../enums/postType.enum';\nimport { postStatus } from '../enums/postStatus.enum';\nimport { CreatePostMetaOptionsDto } from './create-post-meta-options.dto';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class CreatePostDto {\n  @ApiProperty({\n    description: 'The title of the post',\n    example: 'My first post',\n  })\n  @IsString()\n  @MinLength(4)\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty({\n    enum: postType,\n    description: 'Possible Values: post, page, story, series',\n  })\n  @IsEnum(postType)\n  @IsNotEmpty()\n  postType: postType;\n\n  @ApiProperty({\n    description:\n      'A slug is a part of a URL that identifies a particular page on a website in an easy to read form. For example, \"my-url\"',\n    example: 'my-blog-post',\n  })\n  @IsString()\n  @IsNotEmpty()\n  @Matches(/^[a-z0-9]+(?:-[a-z0-9]+)*$/, {\n    message:\n      'A slug should be all small letters and uses only \"-\" and without spaces. For example \"my-url\"',\n  })\n  slug: string;\n\n  @ApiProperty({\n    enum: postStatus,\n    description: 'Possible Values: draft, scheduled, review, published',\n  })\n  @IsEnum(postStatus)\n  @IsNotEmpty()\n  status: postStatus;\n\n  @ApiPropertyOptional({\n    description: 'The content of the post',\n    example: 'This is my first post',\n  })\n  @IsString()\n  @IsOptional()\n  content?: string;\n\n  @ApiPropertyOptional({\n    description:\n      'Serialize your JSON object, else a validation error will be thrown',\n    example:\n      '{\\r\\n \\\"@context\\\": \\\"https:\\/\\/schema.org\\\",\\r\\n \\\"@type\\\": \\\"Person\\\"\\r\\n}',\n  })\n  @IsOptional()\n  @IsJSON()\n  schema?: string; // JSON string\n\n  @ApiPropertyOptional({\n    description: 'The URL of the featured image',\n    example: 'http://localhost.com/images/image1.jpg',\n  })\n  @IsUrl()\n  @IsOptional()\n  featuredImageUrl?: string;\n\n  @ApiPropertyOptional({\n    description: 'The date the post was published',\n    example: '2024-03-16T07:46:32+0000',\n  })\n  @IsISO8601() // ISO 8601 date format\n  @IsOptional()\n  publishedOn?: Date;\n\n  @ApiPropertyOptional({\n    description: 'Array of tags passed as string values',\n    example: \"['tag1', 'tag2']\",\n  })\n  @IsString({ each: true }) // each: true means that each item in the array should be a string\n  @IsArray()\n  @IsOptional()\n  @MinLength(3, { each: true }) // each item should have at least 3 characters\n  tags?: string[];\n\n  @ApiPropertyOptional({\n    type: 'array',\n    required: false,\n    items: {\n      type: 'object',\n      properties: {\n        key: {\n          type: 'string',\n          description:\n            'The key can be any string identifier for your meta option',\n          example: 'sidebarEnabled',\n        },\n        value: {\n          type: 'any',\n          description: 'Any value that you want to save to the key',\n          example: true,\n        },\n      },\n    },\n  }) // metadata options is not required, but objects inside the array are required\n  @IsOptional()\n  @IsArray()\n  // Nested validation\n  @ValidateNested({ each: true })\n  @Type(() => CreatePostMetaOptionsDto)\n  // this type decorator does two things.\n  // First, it matches the incoming request to this particular DTO over here and creates an instance of this particular DTO whenever an incoming request comes in.\n  // Secondly, all the properties of the objects are validated against the create post meta options DTO.\n  // So the incoming object should contain all these properties, and it should match all the validations\n  metaOptions?: CreatePostMetaOptionsDto[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreatePostMetaOptionsDto.html":{"url":"classes/CreatePostMetaOptionsDto.html","title":"class - CreatePostMetaOptionsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreatePostMetaOptionsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/create-post-meta-options.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                key\n                            \n                            \n                                    \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        key\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        value\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/create-post-meta-options.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class CreatePostMetaOptionsDto {\n  @IsString()\n  @IsNotEmpty()\n  key: string;\n\n  @IsNotEmpty()\n  value: any;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                firstName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                lastName\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsOptional()@MinLength(3)@MaxLength(96)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)@Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/, {message: 'Password must contain at least one uppercase letter, one lowercase letter, and one number'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/create-user.dto.ts:35\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  IsEmail,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Matches,\n  MaxLength,\n  MinLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(3)\n  @MaxLength(96)\n  firstName: string;\n\n  @IsString()\n  @IsOptional()\n  @MinLength(3)\n  @MaxLength(96)\n  lastName?: string;\n\n  @IsEmail()\n  @IsNotEmpty()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  @Matches(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d]{8,}$/, {\n    message:\n      'Password must contain at least one uppercase letter, one lowercase letter, and one number',\n  })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetUsersParamDto.html":{"url":"classes/GetUsersParamDto.html","title":"class - GetUsersParamDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetUsersParamDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/get-users-param.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Optional\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Get user with a specific ID', example: 1234})@IsOptional()@IsInt()@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dtos/get-users-param.dto.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsInt, IsOptional } from 'class-validator';\nimport { Type } from 'class-transformer';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\nexport class GetUsersParamDto {\n  @ApiPropertyOptional({\n    description: 'Get user with a specific ID',\n    example: 1234,\n  })\n  @IsOptional()\n  @IsInt()\n  @Type(() => Number)\n  id?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchPostDto.html":{"url":"classes/PatchPostDto.html","title":"class - PatchPostDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchPostDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/dtos/patch-post.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreatePostDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The id of the post that needs to be updated'})@IsInt()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/posts/dtos/patch-post.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsInt, IsNotEmpty } from 'class-validator';\nimport { CreatePostDto } from './create-post.dto';\n\nexport class PatchPostDto extends PartialType(CreatePostDto) {\n  @ApiProperty({\n    description: 'The id of the post that needs to be updated',\n  })\n  @IsInt()\n  @IsNotEmpty()\n  id: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PatchUserDto.html":{"url":"classes/PatchUserDto.html","title":"class - PatchUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PatchUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dtos/patch-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class PatchUserDto extends PartialType(CreateUserDto) {\n  \n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/PostsController.html":{"url":"controllers/PostsController.html","title":"controller - PostsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  PostsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/posts.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                posts\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                createPost\n                            \n                            \n                                    \n                                    Public\n                                getPosts\n                            \n                            \n                                    \n                                    \n                                    \n                                    Public\n                                updatePost\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost(createPostDto: CreatePostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a new post'})@ApiResponse({status: 201, description: 'The post has been successfully created.'})@Post()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createPostDto\n                                            \n                                                            CreatePostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        getPosts\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPosts(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:userId?')\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Public\n                        updatePost\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePost(patchPostDto: PatchPostDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update post'})@ApiResponse({status: 200, description: 'The post has been successfully updated.'})@Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/posts/posts.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchPostDto\n                                            \n                                                            PatchPostDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Param, Patch, Post } from '@nestjs/common';\nimport { PostsService } from './providers/posts.service';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { CreatePostDto } from './dtos/create-post.dto';\nimport { PatchPostDto } from './dtos/patch-post.dto';\n\n@Controller('posts')\n@ApiTags('Posts')\nexport class PostsController {\n  constructor(private readonly postsService: PostsService) {}\n\n  @Get('/:userId?')\n  public getPosts(@Param('userId') userId: string) {\n    return this.postsService.findAll(userId);\n  }\n\n  @ApiOperation({ summary: 'Create a new post' })\n  @ApiResponse({\n    status: 201,\n    description: 'The post has been successfully created.',\n  })\n  @Post()\n  public createPost(@Body() createPostDto: CreatePostDto) {\n    console.log(createPostDto);\n  }\n\n  @ApiOperation({ summary: 'Update post' })\n  @ApiResponse({\n    status: 200,\n    description: 'The post has been successfully updated.',\n  })\n  @Patch()\n  public updatePost(@Body() patchPostDto: PatchPostDto) {\n    console.log(patchPostDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PostsModule.html":{"url":"modules/PostsModule.html","title":"module - PostsModule","body":"\n                   \n\n\n\n\n    Modules\n    PostsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_imports\n\n\n\ncluster_PostsModule_providers\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nPostsModule\n\nPostsModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/posts/posts.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PostsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            PostsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PostsController } from './posts.controller';\nimport { PostsService } from './providers/posts.service';\nimport { UsersModule } from 'src/users/users.module';\n\n@Module({\n  controllers: [PostsController],\n  providers: [PostsService],\n  imports: [UsersModule],\n})\nexport class PostsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PostsService.html":{"url":"injectables/PostsService.html","title":"injectable - PostsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PostsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/posts/providers/posts.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                createPost\n                            \n                            \n                                    Public\n                                findAll\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/posts/providers/posts.service.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        createPost\n                        \n                    \n                \n            \n            \n                \n                        \n                    createPost()\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/posts/providers/posts.service.ts:9\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UsersService } from './../../users/providers/users.service';\n\n@Injectable()\nexport class PostsService {\n  //injecting the UsersService into the PostsService\n  constructor(private readonly usersService: UsersService) {}\n\n  public findAll(userId: string) {\n    const user = this.usersService.findOneById(userId);\n    return [\n      {\n        user: user,\n        title: 'Post 1',\n        content: 'This is post 1',\n      },\n      {\n        user: user,\n        title: 'Post 2',\n        content: 'This is post 2',\n      },\n    ];\n  }\n\n  public createPost() {\n    return 'You sent a POST request to posts endpoint';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createUser\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                    Public\n                                getUsers\n                            \n                            \n                                    \n                                    Public\n                                patchUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:57\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                            Public\n                        getUsers\n                        \n                    \n                \n            \n            \n                \n                        \n                    getUsers(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id?')@ApiOperation({summary: 'fetches a list of registered users on our application'})@ApiResponse({status: 200, description: 'Users successfully fetched'})@ApiQuery({name: 'limit', required: false, type: Number, description: 'The number of entries returned per query', example: 10})@ApiQuery({name: 'page', required: false, type: Number, description: 'The position of the page number that you want the API to return', example: 1})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        patchUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    patchUser(patchUserDto: PatchUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch()\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                patchUserDto\n                                            \n                                                            PatchUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         PatchUserDto\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Param,\n  Query,\n  Body,\n  ParseIntPipe,\n  DefaultValuePipe,\n  Patch,\n} from '@nestjs/common';\nimport { CreateUserDto } from './dtos/create-user.dto';\nimport { GetUsersParamDto } from './dtos/get-users-param.dto';\nimport { PatchUserDto } from './dtos/patch-user.dto';\nimport { UsersService } from './providers/users.service';\nimport { ApiOperation, ApiQuery, ApiResponse, ApiTags } from '@nestjs/swagger';\n\n// controllers hold only the routing logic\n@Controller('users')\n@ApiTags('Users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  // receives request, validates input, and sends it to the service\n  @Get('/:id?')\n  @ApiOperation({\n    summary: 'fetches a list of registered users on our application',\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Users successfully fetched',\n  })\n  @ApiQuery({\n    name: 'limit',\n    required: false,\n    type: Number,\n    description: 'The number of entries returned per query',\n    example: 10,\n  })\n  @ApiQuery({\n    name: 'page',\n    required: false,\n    type: Number,\n    description:\n      'The position of the page number that you want the API to return',\n    example: 1,\n  })\n  public getUsers(\n    @Param() getUsersParamDto: GetUsersParamDto,\n    @Query('limit', new DefaultValuePipe(10), ParseIntPipe) limit: number,\n    @Query('page', new DefaultValuePipe(1), ParseIntPipe) page: number,\n  ) {\n    return this.usersService.findAll(getUsersParamDto, limit, page);\n  }\n\n  @Post()\n  public createUser(@Body() createUserDto: CreateUserDto) {\n    console.log(createUserDto);\n    return 'You sent a POST request to users endpoint';\n  }\n\n  @Patch()\n  public patchUser(@Body() patchUserDto: PatchUserDto) {\n    return patchUserDto;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, forwardRef } from '@nestjs/common';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './providers/users.service';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n  imports: [forwardRef(() => AuthModule)],  //to avoid circular dependency\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/providers/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and perform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                findAll\n                            \n                            \n                                    Public\n                                findOneById\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll(getUsersParamDto: GetUsersParamDto, limit: number, page: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:13\n                        \n                    \n\n\n            \n                \n                        Method to get all users data from database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getUsersParamDto\n                                            \n                                                            GetUsersParamDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     {}\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/providers/users.service.ts:33\n                        \n                    \n\n\n            \n                \n                        find a single user using id of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: number; firstName: string; email: string; }\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, forwardRef, Inject } from '@nestjs/common';\nimport { GetUsersParamDto } from './../dtos/get-users-param.dto';\nimport { AuthService } from 'src/auth/providers/auth.service';\n\n/**\n * Class to connect to Users table and perform business operations\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Method to get all users data from database\n   */\n  public findAll(\n    getUsersParamDto: GetUsersParamDto,\n    limit: number,\n    page: number,\n  ) {\n    return [\n      {\n        firstName: 'John',\n        email: 'john@doe.com',\n      },\n      {\n        firstName: 'Alice',\n        email: 'alice@doe.com',\n      },\n    ];\n  }\n\n  /**\n   * find a single user using id of the user\n   */\n  public findOneById(id: string) {\n    return { id: 1234, firstName: 'Alice', email: 'alice@doe.com' };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/providers/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post-meta-options.dto.ts\n            \n            class\n            CreatePostMetaOptionsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/posts/dtos/create-post.dto.ts\n            \n            class\n            CreatePostDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/posts/dtos/patch-post.dto.ts\n            \n            class\n            PatchPostDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/posts/posts.controller.ts\n            \n            controller\n            PostsController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/posts/providers/posts.service.ts\n            \n            injectable\n            PostsService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dtos/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dtos/get-users-param.dto.ts\n            \n            class\n            GetUsersParamDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dtos/patch-user.dto.ts\n            \n            class\n            PatchUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/providers/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.23\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/mapped-types : ^2.0.5\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.3.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            postStatus   (src/.../postStatus.enum.ts)\n                        \n                        \n                            postType   (src/.../postType.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/posts/enums/postStatus.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postStatus\n                    \n                \n                        \n                            \n                                 DRAFT\n                            \n                        \n                        \n                            \n                                Value : draft\n                            \n                        \n                        \n                            \n                                 SCHEDULED\n                            \n                        \n                        \n                            \n                                Value : scheduled\n                            \n                        \n                        \n                            \n                                 REVIEW\n                            \n                        \n                        \n                            \n                                Value : review\n                            \n                        \n                        \n                            \n                                 PUBLISHED\n                            \n                        \n                        \n                            \n                                Value : published\n                            \n                        \n            \n        \n\n    src/posts/enums/postType.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        postType\n                    \n                \n                        \n                            \n                                 POST\n                            \n                        \n                        \n                            \n                                Value : post\n                            \n                        \n                        \n                            \n                                 PAGE\n                            \n                        \n                        \n                            \n                                Value : page\n                            \n                        \n                        \n                            \n                                 STORY\n                            \n                        \n                        \n                            \n                                Value : story\n                            \n                        \n                        \n                            \n                                 SERIES\n                            \n                        \n                        \n                            \n                                Value : series\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covDeployment\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the deployment documentation for more information.\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out Mau, our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\nExample :$ npm install -g mau\n$ mau deployWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\nResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nDeploy your application to AWS with the help of NestJS Mau in just a few clicks.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PostsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_PostsModule\n\n\n\ncluster_PostsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nPostsModule\n\nPostsModule\n\nAppModule -->\n\nPostsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nPostsModule -->\n\nUsersModule->PostsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nPostsService\n\nPostsService\n\nPostsModule -->\n\nPostsService->PostsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
